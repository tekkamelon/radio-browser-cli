#!/usr/bin/env python3
"""
Radio Browser CLI - MPD対応ウェブラジオ検索ツール
Radio-Browser.info APIを使用してラジオ局を検索し、MPDで再生可能な形式で出力
"""

import requests
import json
import argparse
import sys


class RadioBrowserCLI:
    def __init__(self):
        self.base_url = "https://de1.api.radio-browser.info/json"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'RadioBrowserCLI/1.0'
        })

    def search_stations(self, **kwargs):
        """ラジオ局を検索"""
        params = {}
        if kwargs.get('name'):
            params['name'] = kwargs['name']
        if kwargs.get('country'):
            params['country'] = kwargs['country']
        if kwargs.get('tag'):
            params['tag'] = kwargs['tag']
        if kwargs.get('language'):
            params['language'] = kwargs['language']
        # 結果数制限
        params['limit'] = kwargs.get('limit', 20)
        params['hidebroken'] = 'true'
        try:
            response = self.session.get(
                f"{self.base_url}/stations/search",
                params=params
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"エラー: API接続に失敗しました - {e}", file=sys.stderr)
            return []

    def get_countries(self):
        """利用可能な国のリストを取得"""
        try:
            response = self.session.get(f"{self.base_url}/countries")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"エラー: 国リストの取得に失敗しました - {e}", file=sys.stderr)
            return []

    def get_tags(self):
        """利用可能なタグのリストを取得"""
        try:
            response = self.session.get(f"{self.base_url}/tags")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"エラー: タグリストの取得に失敗しました - {e}", file=sys.stderr)
            return []

    def display_stations(self, stations, format_type='csv'):
        """検索結果を表示"""
        if not stations:
            return

        if format_type == 'csv':
            for i, station in enumerate(stations):
                name = station.get('name', 'N/A').replace(',', ';').replace(
                    '"', "'"
                )
                country = station.get('country', 'N/A')
                tags = station.get('tags', 'N/A').replace(',', ';')
                url = station.get('url_resolved', station.get('url', 'N/A'))
                bitrate = station.get('bitrate', 'N/A')
                codec = station.get('codec', 'N/A')
                print(f"{i+1},{name},{country},{tags},{bitrate},{codec},{url}")

        elif format_type == 'tsv':
            for i, station in enumerate(stations):
                name = station.get('name', 'N/A').replace('\t', ' ')
                country = station.get('country', 'N/A')
                tags = station.get('tags', 'N/A').replace('\t', ' ')
                url = station.get('url_resolved', station.get('url', 'N/A'))
                bitrate = station.get('bitrate', 'N/A')
                codec = station.get('codec', 'N/A')
                print(
                    f"{i+1}\t{name}\t{country}\t{tags}\t"
                    f"{bitrate}\t{codec}\t{url}"
                )

        elif format_type == 'urls':
            for station in stations:
                url = station.get('url_resolved', station.get('url', ''))
                if url:
                    print(url)

        elif format_type == 'json':
            print(json.dumps(stations, indent=2, ensure_ascii=False))

        elif format_type == 'm3u':
            print("#EXTM3U")
            for station in stations:
                name = station.get('name', 'Unknown')
                url = station.get('url_resolved', station.get('url', ''))
                if url:
                    print(f"#EXTINF:-1,{name}")
                    print(url)


def main():
    parser = argparse.ArgumentParser(
        description='Radio-Browser.info APIを使用したラジオ局検索ツール'
    )
    subparsers = parser.add_subparsers(dest='command', help='利用可能なコマンド')
    # search コマンド
    search_parser = subparsers.add_parser('search', help='ラジオ局を検索')
    search_parser.add_argument('--name', help='ラジオ局名で検索')
    search_parser.add_argument('--country', help='国で検索')
    search_parser.add_argument('--tag', help='ジャンル/タグで検索')
    search_parser.add_argument('--language', help='言語で検索')
    search_parser.add_argument(
            '--limit', type=int, default=20, help='結果数の上限 (デフォルト: 20)'
    )
    search_parser.add_argument(
        '--format', choices=['csv', 'tsv', 'urls', 'json', 'm3u'],
        default='csv', help='出力形式 (デフォルト: csv)')
    # countries コマンド
    countries_parser = subparsers.add_parser('countries', help='利用可能な国のリストを表示')
    countries_parser.add_argument(
            '--limit', type=int, default=50, help='表示数の上限'
    )
    # tags コマンド
    tags_parser = subparsers.add_parser('tags', help='利用可能なタグのリストを表示')
    tags_parser.add_argument('--limit', type=int, default=50, help='表示数の上限')
    args = parser.parse_args()
    if not args.command:
        parser.print_help()
        return
    cli = RadioBrowserCLI()
    if args.command == 'search':
        stations = cli.search_stations(
            name=args.name,
            country=args.country,
            tag=args.tag,
            language=args.language,
            limit=args.limit
        )
        cli.display_stations(stations, args.format)
    elif args.command == 'countries':
        countries = cli.get_countries()
        print("利用可能な国:")
        for i, country in enumerate(countries[:args.limit]):
            print(
                f"  {country.get('name', 'N/A')} "
                f"({country.get('stationcount', 0)} 局)"
            )
    elif args.command == 'tags':
        tags = cli.get_tags()
        print("利用可能なタグ:")
        for i, tag in enumerate(tags[:args.limit]):
            print(
                f"  {tag.get('name', 'N/A')} "
                f"({tag.get('stationcount', 0)} 局))"
            )


if __name__ == '__main__':
    main()
